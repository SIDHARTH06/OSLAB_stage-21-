alias functionNum R1;
alias PID R2;

if( (functionNum == FREE_USER_AREA_PAGE) ) then
	alias userAreaPage R2;
	userAreaPage = [PROCESS_TABLE + PID*16 + 11];
	//call release page function
	multipush(R1, R2, R3, R4);
	R1 = RELEASE_PAGE;
	R2 = userAreaPage;
	call MOD_2;
	multipop(R1, R2, R3, R4);
	return;
endif;

if( (functionNum == EXIT_PROCESS) ) then
	//call Free page table
	multipush(R1, R2, R3, R4);
	R1 = FREE_PAGE_TABLE;
	R2 = PID;
	call MOD_1;
	multipop(R1, R2, R3, R4);
	multipush(R1, R2, R3, R4);
	R1 = FREE_USER_AREA_PAGE;
	R2 = PID;
	call MOD_1;
	multipop(R1, R2, R3, R4);
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;
	return;
endif;

if( (functionNum == FREE_PAGE_TABLE) ) then
	alias ptbr_current_pid R4;
	ptbr_current_pid = [PROCESS_TABLE + PID*16 + 14];
	R5 = 0;
	while( (R5 < 2) ) do
		[ptbr_current_pid + R5*2] = -1;
		[ptbr_current_pid + R5*2 + 1] = "0000";
		R5 = R5+1;
	endwhile;
	R5 = 2;
	while( (R5 < 10) ) do
		if( ([ptbr_current_pid + R5*2] != -1) ) then
			//call release page
			multipush(R1, R2, R3, R4, R5);
			R1 = RELEASE_PAGE;
			R2 = [ptbr_current_pid + R5*2];
			call MOD_2;
			multipop(R1, R2, R3, R4, R5);
			[ptbr_current_pid + R5*2] = -1;
			[ptbr_current_pid + R5*2 + 1] = "0000";
		endif;
		R5 = R5+1;
	endwhile;
	return;
endif;
if ( (functionNum == GET_PCB_ENTRY)) then
	alias i R3;
	alias pidret R0;
	alias found R5;
	alias process_tb_entry R4;
	while (i<MAX_PROC_NUM) do
		process_tb_entry = PROCESS_TABLE + i*16;
		if ([process_tb_entry+4]==TERMINATED) then
			found=1;
			pidret = [process_tb_entry+1];
			[process_tb_entry+4]=ALLOCATED;
		endif;
		if(found==0) then
			pidret = -1;
			return;
		endif;
		[process_tb_entry + 4] = i;
		[process_tb_entry + 4] = ALLOCATED;
		[process_tb_entry+14]=PAGE_TABLE_BASE+20*i;
		[process_tb_entry+15]=10;
		pidret=i;
		return;
	endwhile;
endif;
return;