[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = -1;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

backup;
multipush(EIP);

if(( (EC != 0) || ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] == (PTLR*512-1)) )) then
	print "EC";
	print EC;
	print "or stack is full";
	breakpoint;
	multipush(R0, R1, R2, R3, R4); 
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	multipop(R0, R1, R2, R3, R4);
	call MOD_5;
endif;

if(( (EPN >= 4) && (EPN <= 7) )) then
	R10 = 0;
	multipush(R0, R1, R2, R3, R4, R5);
	R1 = GET_CODE_PAGE;
	R2 = [DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+EPN];
	breakpoint;
	call MOD_2;
	
	R10 = R0; 
	multipop(R0, R1, R2, R3, R4, R5);

	[PTBR + EPN*2] = R10;
	[PTBR + EPN*2+1] = "1100";
	breakpoint;
endif;


if(( (EPN >= 2) && (EPN <= 3) )) then

	multipush(R0, R1, R2, R3, R4, R5, R6);
	R1 = GET_FREE_PAGE;
	call MOD_2;

	R10 = R0;
	multipop(R0, R1, R2, R3, R4, R5, R6);
	[PTBR + 2*2] = R10;
	[PTBR + 2*2 + 1] = "1110";

	multipush(R0, R1, R2, R3, R4, R5, R6);
	R1 = GET_FREE_PAGE;
	call MOD_2;

	R10 = R0;
	multipop(R0, R1, R2, R3, R4, R5, R6);
	[PTBR + 3*2] = R10;
	[PTBR + 3*2 + 1] = "1110";
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
multipop(EIP);
restore;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
SP = SP + 1;
[[PTBR + (SP/512)*2]*512 + (SP%512)] = EIP;
breakpoint;
ireturn;