alias userSP R0;
userSP=SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]* 16 + 13]=userSP; //saving user sp
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;//MODE flag
//setup kernel stack
alias currentpid R8;
currentpid = [SYSTEM_STATUS_TABLE + 1];
SP = [PROCESS_TABLE + currentpid*16 + 11]*512 - 1;
//get file name and filename address
alias file_name_add R1;
alias file_name R2;
file_name_add = ( [PTBR + 2*((userSP-4)/512)]*512 ) + (userSP-4)%512;
file_name = [file_name_add];

alias found R3;//flag for file found
found = 0;
alias inode_index R4;
inode_index = 0;
while( (inode_index < MAX_FILE_NUM) ) do
	if(( ([INODE_TABLE + inode_index*16 + 1] == file_name) && ([INODE_TABLE + inode_index*16 + 0] == EXEC) )) then
		found = 1;
		break;
	endif;
	inode_index = inode_index + 1;
endwhile;

if( (found == 0) ) then
	//file not found
	alias retAdd R5;
	retAdd = ( [PTBR + 2*((userSP-1)/512)]*512 ) + (userSP-1)%512;
	[retAdd] = -1;
	SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
	ireturn;
endif;
//deallocate the resources of the current process
multipush(R0, R1, R2, R3, R4, R5);
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE+1];
call MOD_1;
multipop(R0, R1, R2, R3, R4, R5);

alias userAreaPage R6;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

//Initialize kernel stack of new process
SP = userAreaPage*512 - 1;
//pre process resource table
R7 = 496;
 while( (R7 < 512) ) do
 	[userAreaPage*512 + R7] = -1;
 	R7 = R7 + 1;
 endwhile;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 7] = inode_index;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap

[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//stack
multipush(R0, R1, R2, R3, R4, R5, R6);
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipop(R0, R1, R2, R3, R4, R5, R6);

multipush(R0, R1, R2, R3, R4, R5, R6);
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R0, R1, R2, R3, R4, R5, R6);

//get code 
//invalidate rest all

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + 16*inode_index + 8];//first block number
call MOD_2;
//R0 will have the code mem page number
//first page table entry is set rest are invalidated.
[PTBR+8] = R0;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

//Initialize disk map table

R8 = 0;
while( (R8 < 10) ) do
	[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + R8] = -1;
	R8 = R8 + 1;
endwhile;

//set the values of code blocks in disk map table
R8 = 0;
while( (R8 < 4) ) do
	//here value will be -1 if there is no disk block
	[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + (R8+4)] = [INODE_TABLE + inode_index*16 + (R8+8)];
	R8 = R8 + 1;
endwhile;

[ [PTBR+16]*512 ] = [ ( ([PTBR+8])*512 ) + 1 ];

SP = 8*512;
breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
ireturn;
